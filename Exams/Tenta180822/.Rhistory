alpha2 = 10
beta2 = 10
thetaGrid = seq(0,4,.01)
plot(thetaGrid,dgamma(thetaGrid,alpha1,beta1),type="l",ylab="",xlab="theta",main="Gamma prior densities")
lines(thetaGrid,dgamma(thetaGrid,alpha2,beta2),col="red")
legend(x=3,y=.3,c("M1","M2"),col = c("black","red"), lty = c(1,1))
```
The $M_1$ prior has mean $\frac21 = 2$ and variance $\frac{2}{1\cdot1} = 2$. The $M_2$ prior has mean $\frac{10}{10} = 1$ and variance $\frac{10}{10\cdot10} = 0.1$. Comparing the variances tells us that the $M_2$ prior is more informative and this can also be seen by plotting the densities. This is because the $M_2$ prior is more concentrated and has thinner tails.
### 4b
```{r}
logprior <- function(theta,alpha,beta){
return(dgamma(theta,shape=alpha,rate=beta,log=T))
}
loglik <- function(x,theta){
return(sum(dexp(x,theta,log=T)))
}
logposterior <- function(theta,alpha,beta,x){
return(dgamma(theta,shape=alpha+length(x),rate=beta+sum(x),log=T))
}
logmarglik <- function(theta,alpha,beta,x){
return(loglik(x,theta) + logprior(theta,alpha,beta) - logposterior(theta,alpha,beta,x))
}
lms = c(logmarglik(1,alpha1,beta1,x),logmarglik(1,alpha2,beta2,x))
unnormProbs = .5*exp(lms)
probs = unnormProbs/sum(unnormProbs)
print(probs)
logmarglik(1,alpha1,beta1,x)
logposterior(theta,alpha,beta,x)
logposterior(theta,alpha,beta,x)
legend(x=3,y=.3,c("M1","M2"),col = c("black","red"), lty = c(1,1))$M_1$
### 4b
logprior <- function(theta,alpha,beta){
return(dgamma(theta,shape=alpha,rate=beta,log=T))
}
loglik <- function(x,theta){
return(sum(dexp(x,theta,log=T)))
}
logposterior <- function(theta,alpha,beta,x){
return(dgamma(theta,shape=alpha+length(x),rate=beta+sum(x),log=T))
}
logmarglik <- function(theta,alpha,beta,x){
return(loglik(x,theta) + logprior(theta,alpha,beta) - logposterior(theta,alpha,beta,x))
}
legend(x=3,y=.3,c("M1","M2"),col = c("black","red"), lty = c(1,1))$M_1$
### 4b
logprior <- function(theta,alpha,beta){
return(dgamma(theta,shape=alpha,rate=beta,log=T))
}
legend(x=3,y=.3,c("M1","M2"),col = c("black","red"), lty = c(1,1))
### 4b
logprior <- function(theta,alpha,beta){
return(dgamma(theta,shape=alpha,rate=beta,log=T))
}
loglik <- function(x,theta){
return(sum(dexp(x,theta,log=T)))
}
logposterior <- function(theta,alpha,beta,x){
return(dgamma(theta,shape=alpha+length(x),rate=beta+sum(x),log=T))
}
logmarglik <- function(theta,alpha,beta,x){
return(loglik(x,theta) + logprior(theta,alpha,beta) - logposterior(theta,alpha,beta,x))
}
lms = c(logmarglik(1,alpha1,beta1,x),logmarglik(1,alpha2,beta2,x))
unnormProbs = .5*exp(lms)
probs = unnormProbs/sum(unnormProbs)
print(probs)
M = rbinom(1,1,probs[2]) + 1
M
p = ((beta1^alpha)*gamma(n+alpha))/(gamma(alpha)*(beta +sum(x)^(alpha+n))
p = ((beta1^alpha)*gamma(n+alpha))/((gamma(alpha)*beta +sum(x)^(alpha+n))
p = ((beta1^alpha)*gamma(n+alpha))/(gamma(alpha)*beta +sum(x)^(alpha+n))
#
x = cellphones
n = length(x)
alpha1 = 2
beta1 = 1
alpha2 = 10
beta2 = 10
p = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*beta1 +sum(x)^(alpha1+n))
p
p = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*(beta1 +sum(x))^(alpha1+n))
p
runif(1)
runif(1)
runif(1)
if(runif(1)) >0.5
x = cellphones
n = length(x)
alpha1 = 2
beta1 = 1
n
p = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*(beta1 + sum(x))^(alpha1+n))
p1 = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*(beta1 + sum(x))^(alpha1+n))
p2 = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*(beta1 + sum(x))^(alpha1+n))
post1 = p1*0.5
post2 = p2*0.5
post1 = post1/(post1+post2)
post1
post1 = p1*0.5
post2 = p2*0.5
p1 = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*(beta1 + sum(x))^(alpha1+n))
p2 = ((beta1^alpha2)*gamma(n+alpha2))/(gamma(alpha2)*(beta2 + sum(x))^(alpha2+n))
post1 = p1*0.5
post2 = p2*0.5
post1 = post1/(post1+post2)
psot1
post1
post1 = p1*0.5
post2 = p2*0.5
post1
post2
### 4b
logprior <- function(theta,alpha,beta){
return(dgamma(theta,shape=alpha,rate=beta,log=T))
}
loglik <- function(x,theta){
return(sum(dexp(x,theta,log=T)))
}
logposterior <- function(theta,alpha,beta,x){
return(dgamma(theta,shape=alpha+length(x),rate=beta+sum(x),log=T))
}
logmarglik <- function(theta,alpha,beta,x){
return(loglik(x,theta) + logprior(theta,alpha,beta) - logposterior(theta,alpha,beta,x))
}
lms = c(logmarglik(1,alpha1,beta1,x),logmarglik(1,alpha2,beta2,x))
unnormProbs = .5*exp(lms)
probs = unnormProbs/sum(unnormProbs)
print(probs)
### 4b
logprior <- function(theta,alpha,beta){
return(dgamma(theta,shape=alpha,rate=beta,log=T))
}
loglik <- function(x,theta){
return(sum(dexp(x,theta,log=T)))
}
logposterior <- function(theta,alpha,beta,x){
return(dgamma(theta,shape=alpha+length(x),rate=beta+sum(x),log=T))
}
logmarglik <- function(theta,alpha,beta,x){
return(loglik(x,theta) + logprior(theta,alpha,beta) - logposterior(theta,alpha,beta,x))
}
lms = c(logmarglik(0.5,alpha1,beta1,x),logmarglik(0.5,alpha2,beta2,x))
unnormProbs = .5*exp(lms)
probs = unnormProbs/sum(unnormProbs)
print(probs)
p1 = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*(beta1 + sum(x))^(alpha1+n))
p2 = ((beta1^alpha2)*gamma(n+alpha2))/(gamma(alpha2)*(beta2 + sum(x))^(alpha2+n))
post1 = p1*0.5
post2 = p2*0.5
post1 = post1/(post1+post2)
post1
post1
p1 = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*(beta1 + sum(x))^(alpha1+n))
p2 = ((beta1^alpha2)*gamma(n+alpha2))/(gamma(alpha2)*(beta2 + sum(x))^(alpha2+n))
p1
p2
post1 = p1*0.5
post2 = p2*0.5
post1
post2
sum = post1 + post2
sum
p1 = post1/sum
p1
p1/sum
summa = post1 + post2
p1 = p1*0.5
p2 = p2*0.5
summa = post1 + post2
p1/summa
p2/summa
p1 = p1*0.5
p2 = p2*0.5
summa = p1 + p2
p1/summa
p2/summa
p1 = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*(beta1 + sum(x))^(alpha1+n))
p2 = ((beta1^alpha2)*gamma(n+alpha2))/(gamma(alpha2)*(beta2 + sum(x))^(alpha2+n))
p1 = p1*0.5
p2 = p2*0.5
summa = p1 + p2
p1/summa
p2/summa
p1 = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*(beta1 + sum(x))^(alpha1+n))
p2 = ((beta1^alpha2)*gamma(n+alpha2))/(gamma(alpha2)*(beta2 + sum(x))^(alpha2+n))
p1
p2
p1 = ((beta1^alpha1)*gamma(n+alpha1))/(gamma(alpha1)*(beta1 + sum(x))^(alpha1+n))
p2 = ((beta2^alpha2)*gamma(n+alpha2))/(gamma(alpha2)*(beta2 + sum(x))^(alpha2+n))
p1 = p1*0.5
p2 = p2*0.5
summa = p1 + p2
p1/summa
p2/summa
prediction = dexp(1000, draws)
if(runif(1) > 0.5){
draws = rgamma(1000, alpha1 + n, beta1 + sum(x))
} else{
draws = rgamma(1000, alpha2 + n, beta2 + sum(x))
}
prediction = dexp(1000, draws)
plot(prediction)
prediction
thetaGrid = seq(0,20, 0.1)
prediction = dexp(thetaGrid, draws)
plot(prediction)
if(runif(1) > 0.5){
draws = rgamma(1000, alpha1 + n, beta1 + sum(x))
} else{
draws = rgamma(1000, alpha2 + n, beta2 + sum(x))
}
poisson_draws = c()
for (i in 1:nSim){
poisson_draws = append(poisson_draws, rexp(1, draws[1]))
}
nSim = 5000
if(runif(1) > 0.5){
draws = rgamma(nSim, alpha1 + n, beta1 + sum(x))
} else{
draws = rgamma(nSim, alpha2 + n, beta2 + sum(x))
}
poisson_draws = c()
for (i in 1:nSim){
poisson_draws = append(poisson_draws, rexp(1, draws[1]))
}
hist(poisson_draws, 50, freq = FALSE)
sum(poisson_draws<=200)/nSim
gammaGrid = seq(0,12,1)
plot(dexp(gammaGrid, draws))
gammaGrid = seq(0,12,1)
plot(dexp(gammaGrid, draws))
plot(gammaGrid, dexp(gammaGrid, draws))
dexp(gammaGrid, draws)
sum(poisson_draws<=200)/nSim
hist(poisson_draws, 50, freq = FALSE)
plot(poisson_draws)
plot(draws, poisson_draws)
hist(poisson_draws, 50, freq = FALSE)
predictive_draw = c()
for (i in 1:nSim){
if(runif(1) > 0.5){
draws = rgamma(1, alpha1 + n, beta1 + sum(x))
} else{
draws = rgamma(1, alpha2 + n, beta2 + sum(x))
}
predictive_draw = append(predictive_draw, dexp(1, draws))
}
predictive_draw
plot(predictive_draw)
hist(predictive_draw)
hist(predictive_draw)
nSim = 100000
predictive_draw = c()
for (i in 1:nSim){
if(runif(1) > 0.5){
draws = rgamma(1, alpha1 + n, beta1 + sum(x))
} else{
draws = rgamma(1, alpha2 + n, beta2 + sum(x))
}
predictive_draw = append(predictive_draw, rexp(1, draws))
}
hist(predictive_draw)
predictive_draw = c()
for (i in 1:nSim){
M = rbinom(1,1,probs[2]) + 1 # Simulate which model to use
if(M==1){
draws = rgamma(1, alpha1 + n, beta1 + sum(x))
} else{
draws = rgamma(1, alpha2 + n, beta2 + sum(x))
}
predictive_draw = append(predictive_draw, rexp(1, draws))
}
hist(predictive_draw)
p1/summa
p2/summa
p1 = p1/summa
p2 = p2/summa
predictive_draw = c()
for (i in 1:nSim){
M = rbinom(1,1,p2) + 1 # Simulate which model to use
if(M==1){
draws = rgamma(1, alpha1 + n, beta1 + sum(x))
} else{
draws = rgamma(1, alpha2 + n, beta2 + sum(x))
}
predictive_draw = append(predictive_draw, rexp(1, draws))
}
hist(predictive_draw)
p1
p2
print(quantile(predictive_draw,probs = c(.05,.95)))
setwd("C:/Users/Arun/Bayesian_Learning_TDDE07/Tenta180822")
# Bayesian Learning Exam 2018-08-22
# Run this file once during the exam to get all the required data and functions for the exam in working memory
# Author: Per Siden
###############################
########## Problem 1 ##########
###############################
# Reading the data from file
load(file = 'lions.RData')
###############################
########## Problem 2 ##########
###############################
# Reading the data from file
load(file = 'titanic.RData')
###############################
########## Problem 3 ##########
###############################
# No code or data for this problem
###############################
########## Problem 4 ##########
###############################
lions
sigma2 = 0.04
log.posterior = function(x, my, sigma2){
likelihood = sum(dlnorm(x, my, sqrt(sigma2), log = TRUE))
log.prior = dnorm(my, 5, 1, log = TRUE)
log.posterior = log.likelihood + log.prior
return(exp(log.posterior))
}
lions
sigma2 = 0.04
log.posterior = function(my, x, sigma2){
likelihood = sum(dlnorm(x, my, sqrt(sigma2), log = TRUE))
log.prior = dnorm(my, 5, 1, log = TRUE)
log.posterior = log.likelihood + log.prior
return(exp(log.posterior))
}
myGrid = seq(0,20,0,5)
myGrid = seq(0,20,0.5)
myGrid
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
dnorm(1, 5, 1, log = TRUE)
likelihood = sum(dlnorm(x, 1, sqrt(sigma2), log = TRUE))
likelihood
posterior = c()
for(my in myGrid){
posterior = append(posterior, log.posterior(my, lions, sigma2))
}
log.posterior = function(my, x, sigma2){
likelihood = sum(dlnorm(x, my, sqrt(sigma2), log = TRUE))
log.prior = dnorm(my, 5, 1, log = TRUE)
log.posterior = likelihood + log.prior
return(exp(log.posterior))
}
myGrid = seq(0,20,0.5)
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
posterior = c()
for(my in myGrid){
posterior = append(posterior, log.posterior(my, lions, sigma2))
}
myGrid = seq(0,20,0.5)
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
posterior
posterior_normalized = (1/0.5)*posterior/sum(posterior)
posterior_normalized
hist(posterior_normalized)
hist(posterior_normalized, 50)
hist(posterior_normalized, 100)
log.posterior = function(my, x, sigma2){
#likelihood = sum(dlnorm(x, my, sqrt(sigma2), log = TRUE))
likelihood = sum(log(1/(sqrt(2*pi*sigma)*x))-1/(2*sigma2)*(log(x)-my)^2)
log.prior = dnorm(my, 5, 1, log = TRUE)
log.posterior = likelihood + log.prior
return(exp(log.posterior))
}
myGrid = seq(0,20,0.5)
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
myGrid = seq(0,20,length = 1000)
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
log.posterior = function(my, x, sigma2){
likelihood = sum(dlnorm(x, my, sqrt(sigma2), log = TRUE))
#likelihood = sum(log(1/(sqrt(2*pi*sigma)*x))-1/(2*sigma2)*(log(x)-my)^2)
log.prior = dnorm(my, 5, 1, log = TRUE)
log.posterior = likelihood + log.prior
return(exp(log.posterior))
}
myGrid = seq(0,20,length = 1000)
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
Gridwidth = mmyGrid[2] -myGrid[1]
Gridwidth = myGrid[2] -myGrid[1]
Gridwidth = myGrid[2] -myGrid[1]
posterior_normalized = (1/Gridwidth)*posterior/sum(posterior)
hist(posterior_normalized, 100)
plot(myGrid, posterior_normalized)
x = lions
logPostLogNormal <- function(x,mu,sigma2){
sum(dlnorm(x,meanlog=mu,sdlog=sqrt(sigma2), log=TRUE)) + dnorm(mu,5,1,log=TRUE)
}
sigma2 = 0.04
logPostLogNormal(x,5.25,sigma2)
muGrid <- seq(5.15, 5.35, length = 1000)
logPostEvals <- rep(0, 1000)
i = 0
for (mu in muGrid){
i = i + 1
logPostEvals[i] <- logPostLogNormal(x,mu,sigma2)
}
binWidth = muGrid[2]-muGrid[1]
plot(muGrid, exp(logPostEvals)/(sum(exp(logPostEvals))*binWidth), type = "l", ylab = 'Posterior density', xlab = expression(mu))
logPostLogNormal <- function(x,mu,sigma2){
sum(dlnorm(x,meanlog=mu,sdlog=sqrt(sigma2), log=TRUE)) + dnorm(mu,5,1,log=TRUE)
}
x = lions
sigma2 = 0.04
log.posterior = function(my, x, sigma2){
likelihood = sum(dlnorm(x, my, sqrt(sigma2), log = TRUE))
#likelihood = sum(log(1/(sqrt(2*pi*sigma)*x))-1/(2*sigma2)*(log(x)-my)^2)
log.prior = dnorm(my, 5, 1, log = TRUE)
log.posterior = likelihood + log.prior
return(exp(log.posterior))
}
myGrid = seq(0,5,length = 1000)
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
Gridwidth = myGrid[2] -myGrid[1]
posterior_normalized = (1/Gridwidth)*posterior/sum(posterior)
hist(posterior_normalized, 100)
plot(myGrid, posterior_normalized)
myGrid = seq(0,6,length = 1000)
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
posterior = c()
for(my in myGrid){
posterior = append(posterior, log.posterior(my, lions, sigma2))
}
Gridwidth = myGrid[2] -myGrid[1]
posterior_normalized = (1/Gridwidth)*posterior/sum(posterior)
hist(posterior_normalized, 100)
plot(myGrid, posterior_normalized)
myGrid = seq(5,6,length = 1000)
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
posterior = c()
for(my in myGrid){
posterior = append(posterior, log.posterior(my, lions, sigma2))
}
Gridwidth = myGrid[2] -myGrid[1]
posterior_normalized = (1/Gridwidth)*posterior/sum(posterior)
hist(posterior_normalized, 100)
plot(myGrid, posterior_normalized)
x = lions
logPostLogNormal <- function(x,mu,sigma2){
sum(dlnorm(x,meanlog=mu,sdlog=sqrt(sigma2), log=TRUE)) + dnorm(mu,5,1,log=TRUE)
}
sigma2 = 0.04
logPostLogNormal(x,5.25,sigma2)
muGrid <- seq(5.15, 5.35, length = 1000)
logPostEvals <- rep(0, 1000)
i = 0
for (mu in muGrid){
i = i + 1
logPostEvals[i] <- logPostLogNormal(x,mu,sigma2)
}
binWidth = muGrid[2]-muGrid[1]
plot(muGrid, exp(logPostEvals)/(sum(exp(logPostEvals))*binWidth), type = "l", ylab = 'Posterior density', xlab = expression(mu))
plot(myGrid, posterior_normalized, type = 'l')
myGrid = seq(5,5.4,length = 1000)
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
posterior = c()
for(my in myGrid){
posterior = append(posterior, log.posterior(my, lions, sigma2))
}
Gridwidth = myGrid[2] -myGrid[1]
posterior_normalized = (1/Gridwidth)*posterior/sum(posterior)
hist(posterior_normalized, 100)
plot(myGrid, posterior_normalized, type = 'l')
x = lions
logPostLogNormal <- function(x,mu,sigma2){
sum(dlnorm(x,meanlog=mu,sdlog=sqrt(sigma2), log=TRUE)) + dnorm(mu,5,1,log=TRUE)
}
sigma2 = 0.04
logPostLogNormal(x,5.25,sigma2)
muGrid <- seq(5.15, 5.35, length = 1000)
logPostEvals <- rep(0, 1000)
i = 0
for (mu in muGrid){
i = i + 1
logPostEvals[i] <- logPostLogNormal(x,mu,sigma2)
}
binWidth = muGrid[2]-muGrid[1]
plot(muGrid, exp(logPostEvals)/(sum(exp(logPostEvals))*binWidth), type = "l", ylab = 'Posterior density', xlab = expression(mu))
myGrid = seq(5.15,5.4,length = 1000)
posterior = sapply(myGrid, log.posterior, x = lions, sigma2 = sigma2 )
posterior = c()
for(my in myGrid){
posterior = append(posterior, log.posterior(my, lions, sigma2))
}
Gridwidth = myGrid[2] -myGrid[1]
posterior_normalized = (1/Gridwidth)*posterior/sum(posterior)
hist(posterior_normalized, 100)
plot(myGrid, posterior_normalized, type = 'l')
x = lions
logPostLogNormal <- function(x,mu,sigma2){
sum(dlnorm(x,meanlog=mu,sdlog=sqrt(sigma2), log=TRUE)) + dnorm(mu,5,1,log=TRUE)
}
sigma2 = 0.04
logPostLogNormal(x,5.25,sigma2)
muGrid <- seq(5.15, 5.35, length = 1000)
logPostEvals <- rep(0, 1000)
i = 0
for (mu in muGrid){
i = i + 1
logPostEvals[i] <- logPostLogNormal(x,mu,sigma2)
}
binWidth = muGrid[2]-muGrid[1]
plot(muGrid, exp(logPostEvals)/(sum(exp(logPostEvals))*binWidth), type = "l", ylab = 'Posterior density', xlab = expression(mu))
hist(x)
hist(ebay)
plot(xGrid, ebay_normalized)
lines(dbinom(xGrid, 50, 0.103))
hist(ebay)
ebay_normalized = bidsCounts/sum(bidsCounts)
hist(ebay_normalized)
plot(xGrid, ebay_normalized)
