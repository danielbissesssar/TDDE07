t_cens += 1;
x_cens[t_cens] ~ normal(mu,sigma);
}
}
}'
fit_cens =stan(model_code=normal_Model,
data=censData,
warmup  = 500,
iter = 2000,
chains = 1)
res = extract(fit_cens)
plot(res$phi)
hist(res$phi)
plot(x)
x
postThetaMean = colMeans(res$z)
postThetaBands = apply(res$z, 2, quantile, probs = c(0.025, 0.975))
plot(sulfur,type="p",ylim=c(0,500),main="Posterior intensity over time",ylab = "Sulfur emission",
xlab = "time")
plot(x)
plot(sulfur)
plot(sulfur)
plot(sulfur,type="p",ylim=c(0,500),main="Posterior intensity over time",ylab = "Sulfur emission",
xlab = "time")
plot(sulfur)
plot(sulfur,type="p",ylim=c(0,500),main="Posterior intensity over time",ylab = "Sulfur emission",
xlab = "time")
plot(sulfur)
plot(sulfur, type ="p")
plot(sulfur, type ="p")
plot(sulfur,type="p",ylim=c(0,500),main="Posterior intensity over time",ylab = "Sulfur emission",
xlab = "time")
plot(sulfur, type ="p", ylim =c(0,500))
plot(sulfur, type ="p", ylim =c(0,500))
plot(sulfur,type="p",ylim=c(0,500),main="Posterior intensity over time",ylab = "Sulfur emission",
xlab = "time")
plot(sulfur, type ="p")
plot(sulfur, type ="p", ylim = c(0, 500))
plot(sulfur, type ="p", ylim = c(0, 500), xlab = "time")
lines(postThetaMean,type="l",col=2)
lines(postThetaBands[1,],type="l",col=c(3))
lines(postThetaBands[2,],type="l",col=c(3))
setwd("C:/Users/Arun/Bayesian_Learning_TDDE07/Tenta190604")
# Bayesian Learning Exam 2019-06-04
# Run this file once during the exam to get all the required data and functions for the exam in working memory
# Author: Per Siden
###############################
########## Problem 1 ##########
###############################
###############################
########## Problem 2 ##########
###############################
# Loading ebay data
load(file = 'ebay.RData')
bidsCounts <- table(ebay)  # data2Counts is a frequency table of counts.
xGrid <- seq(min(ebay),max(ebay))  # A grid used as input to GibbsMixPois.R over which the mixture density is evaluated.
# Code for Problem 3 - Exam in Bayesian Learning 2017-05-30
GibbsMixPois <- function(x, nComp, alpha, alphaGamma, betaGamma, xGrid, nIter){
# Gibbs sampling for a mixture of Poissons
# Author: Mattias Villani, IDA, Linkoping University. http://mattiasvillani.com
#
# INPUTS:
#   x - vector with data observations (counts)
#   nComp - Number of mixture components to be fitted
#   alpha - The prior on the mixture component weights is w ~ Dir(alpha, alpha,..., alpha)
#   alphaGamma and betaGamma -
#              The prior on the mean (theta) of the Poisson mixture components is
#              theta ~ Gamma(alphaGamma, betaGamma) [rate parametrization of the Gamma dist]
#   xGrid - the grid of data values over which the mixture is evaluated and plotted
#   nIter - Number of Gibbs iterations
#
# OUTPUTS:
#   results$wSample     - Gibbs sample of mixture component weights. nIter-by-nComp matrix
#   results$thetaSample - Gibbs sample of mixture component means.   nIter-by-nComp matrix
#   results$mixDensMean - Posterior mean of the estimated mixture density over xGrid.
####### Defining a function that simulates from a Dirichlet distribution
rDirichlet <- function(param){
nCat <- length(param)
thetaDraws <- matrix(NA,nCat,1)
for (j in 1:nCat){
thetaDraws[j] <- rgamma(1,param[j],1)
}
thetaDraws = thetaDraws/sum(thetaDraws) # Diving every column of ThetaDraws by the sum of the elements in that column.
return(thetaDraws)
}
# Simple function that converts between two different representations of the mixture allocation
S2alloc <- function(S){
n <- dim(S)[1]
alloc <- rep(0,n)
for (i in 1:n){
alloc[i] <- which(S[i,] == 1)
}
return(alloc)
}
# Initial values for the Gibbs sampling
nObs <- length(x)
S <- t(rmultinom(nObs, size = 1 , prob = rep(1/nComp,nComp))) # nObs-by-nComp matrix with component allocations.
theta <- rep(mean(x), nComp) # Each component is initialized at the mean of the data
# Setting up the grid where the mixture density is evaluated.
mixDensMean <- rep(0,length(xGrid))
effIterCount <- 0
# Setting up matrices to store the draws
wSample <- matrix(0, nIter, nComp)
thetaSample <- matrix(0, nIter, nComp)
probObsInComp <- rep(NA, nComp)
# Setting up the priors - the same prior for all components
alpha <- rep(alpha, nComp)
alphaGamma <- rep(alphaGamma, nComp)
betaGamma <- rep(betaGamma, nComp)
# HERE STARTS THE ACTUAL GIBBS SAMPLING
for (k in 1:nIter){
message(paste('Iteration number:',k))
alloc <- S2alloc(S) # Function that converts between different representations of the group allocations
nAlloc <- colSums(S)
# Step 1 - Update components probabilities
w <- rDirichlet(alpha + nAlloc)
wSample[k,] <- w
# Step 2 - Update theta's in Poisson components
for (j in 1:nComp){
theta[j] <- rgamma(1, shape = alphaGamma + sum(x[alloc == j]), rate = betaGamma + nAlloc[j])
}
thetaSample[k,] <- theta
# Step 3 - Update allocation
for (i in 1:nObs){
for (j in 1:nComp){
probObsInComp[j] <- w[j]*dpois(x[i], lambda = theta[j])
}
S[i,] <- t(rmultinom(1, size = 1 , prob = probObsInComp/sum(probObsInComp)))
}
# Computing the mixture density at the current parameters, and averaging that over draws.
effIterCount <- effIterCount + 1
mixDens <- rep(0,length(xGrid))
for (j in 1:nComp){
mixDens <- mixDens + w[j]*compDens
}
mixDensMean <- ((effIterCount-1)*mixDensMean + mixDens)/effIterCount
}
return(results = list(wSample = wSample, thetaSample = thetaSample, mixDensMean = mixDensMean))
}
###############################
########## Problem 3 ##########
###############################
###############################
########## Problem 4 ##########
###############################
# Load cellphone lifetime data
load(file = 'cellphones.RData')
c1 = 4
c2 = 16
posterior_beta = function(c, n){
poterior = rep(0, n)
for(i in 1:length(n)){
posterior[i] = beta(sqrt(c), 20)
}
posterior;
}
plot(posterior_beta(c1, 1000))
plot(posterior_beta(c2, 1000))
plot(posterior_beta(c1, 1000))
plot(posterior_beta(c2, 1000))
plot(posterior_beta(c1, 1000))
plot(posterior_beta(c2, 1000))
plot(posterior_beta(c1, 1000))
plot(posterior_beta(c2, 1000))
posterior_beta = function(c, n){
poterior = rep(0, n)
for(i in 1:length(n)){
posterior[i] = beta(sqrt(c), 20)
}
return(posterior)
}
plot(posterior_beta(c1, 1000))
plot(posterior_beta(c2, 1000))
length(n)
posterior_beta = function(c, n){
poterior = rep(0, n)
for(i in 1:(n)){
posterior[i] = beta(sqrt(c), 20)
}
return(posterior)
}
plot(posterior_beta(c1, 1000))
plot(posterior_beta(c2, 1000))
hist(posterior_beta(c1, 1000))
posterior
p = posterior_beta(c1, 1000)
p
posterior_beta = function(c, n){
poterior = rep(0, n)
for(i in 1:n){
posterior[i] = beta(sqrt(c), 20)
}
return(posterior)
}
p = posterior_beta(c1, 1000)
p
posterior_beta = function(c, n){
poterior = c()
for(i in 1:n){
posterior = append(beta(sqrt(c), 20))
}
return(posterior)
}
p = posterior_beta(c1, 1000)
posterior_beta = function(c, n){
poterior = c()
for(i in 1:n){
posterior = append(posterior, beta(sqrt(c), 20))
}
return(posterior)
}
p = posterior_beta(c1, 1000)
p
posterior_beta = function(c, n){
poterior = c()
for(i in 1:n){
posterior = append(posterior, rbeta(sqrt(c), 20))
}
return(posterior)
}
p = posterior_beta(c1, 1000)
hist(posterior_beta(c1, 1000))
plot(rbeta(1000, sqrt(c1), 20))
plot(dbeta(1000, sqrt(c1), 20))
plot(rbeta(1000, sqrt(c1), 20))
hist(rbeta(1000, sqrt(c1), 20))
hist(rbeta(1000, sqrt(c2), 20))
hist(rbeta(1000, sqrt(c1), 20), 30)
hist(rbeta(1000, sqrt(c2), 20), 30)
par(mfrow = c(1,2))
hist(rbeta(1000, sqrt(c1), 20), 30)
hist(rbeta(1000, sqrt(c2), 20), 30)
hist(rbeta(1000, sqrt(c1), 20), 30, main = "c = 4")
hist(rbeta(1000, sqrt(c2), 20), 30, main = "c = 16")
hist(rbeta(1000, sqrt(c1), 20), 30, main = "c = 4", freq = FALSE)
hist(rbeta(1000, sqrt(c2), 20), 30, main = "c = 16", freq = FALSE)
pgamma(10, sqrt(c1), 20)
pgamma(1, sqrt(c1), 20)
pgamma(0.1, sqrt(c1), 20)
pbeta(0.1, sqrt(c1), 20)
pbeta(0.1, sqrt(c2), 20)
cGrid = seq(4,20,0.5)
utility = function(theta, c){
util = 100 + 20*log(theta) - c
return (util)
}
theta_draws = rbeta(10000, sqrt(c1), 20)
utility = c()
utility_function = function(theta, c){
theta_draws = rbeta(10000, sqrt(c), 20)
util = 0
for(theta in theta_draws){
util = util + 100 + 20*log(theta) - c
}
return (util)
}
utility = c()
for(c in cGrid){
utility =  append(utility, utility_function(c))
}
for(c in cGrid){
utility =  append(utility, utility_function(c1))
}
utility_function = function(c){
theta_draws = rbeta(10000, sqrt(c), 20)
util = 0
for(theta in theta_draws){
util = util + 100 + 20*log(theta) - c
}
return (util)
}
utility = c()
for(c in cGrid){
utility =  append(utility, utility_function(c1))
}
utility
plot(cGrid, utility)
par(mfrwow = c(1,1))
par(mfrow = c(1,1))
for(c in cGrid){
utility =  append(utility, utility_function(c1))
}
plot(cGrid, utility)
length(ccGrid)
length(cGrid)
length(utility)
utility = c()
utility_function = function(c){
theta_draws = rbeta(10000, sqrt(c), 20)
util = 0
for(theta in theta_draws){
util = util + 100 + 20*log(theta) - c
}
return (util)
}
utility = c()
par(mfrow = c(1,1))
for(c in cGrid){
utility =  append(utility, utility_function(c1))
}
utility
plot(cGrid, utility)
plot(cGrid, utility, type = 'l')
plot(cGrid, utility_c1, type = 'l')
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c1))
utility_c2 =  append(utility, utility_function(c2))
}
plot(cGrid, utility_c1, type = 'l')
plot(cGrid, utility_c2, type = 'l')
cGrid = seq(4,20,0.5)
utility_function = function(c){
theta_draws = rbeta(10000, sqrt(c), 20)
util = 0
for(theta in theta_draws){
util = util + 100 + 20*log(theta) - c
}
return (util)
}
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c1))
utility_c2 =  append(utility, utility_function(c2))
}
plot(cGrid, utility_c1, type = 'l')
plot(cGrid, utility_c2, type = 'l')
utility_c1
length(utility_c1)
utility_c1 = c()
utility_c2 = c()
utility_c1
utility_c2
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c1))
utility_c2 =  append(utility, utility_function(c2))
}
plot(cGrid, utility_c1, type = 'l')
utility_c1
length(utility_c1)
length(utility_c2)
length(cGrid)
c1 = 4
c2 = 16
par(mfrow = c(1,2))
hist(rbeta(1000, sqrt(c1), 20), 30, main = "c = 4", freq = FALSE)
hist(rbeta(1000, sqrt(c2), 20), 30, main = "c = 16", freq = FALSE)
pbeta(0.1, sqrt(c1), 20)
pbeta(0.1, sqrt(c2), 20)
cGrid = seq(4,20,0.5)
utility_function = function(c){
theta_draws = rbeta(10000, sqrt(c), 20)
util = 0
for(theta in theta_draws){
util = util + 100 + 20*log(theta) - c
}
return (util)
}
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c1))
utility_c2 =  append(utility, utility_function(c2))
}
plot(cGrid, utility_c1, type = 'l')
plot(cGrid, utility_c2, type = 'l')
length(cGrid)
length(utility)
utility_c1 = rep(0, length(cGrid))
count = 0
utility_c1 = rep(0, length(cGrid))
utility_c2 = c()
par(mfrow = c(1,1))
count = 0
for(c in cGrid){
utility_c1[count] =  utility_function(c1)
utility_c2 =  append(utility, utility_function(c2))
}
plot(cGrid, utility_c1, type = 'l')
utility_c1
utility_function = function(c){
theta_draws_c1 = rbeta(10000, sqrt(c1), 20)
theta_draws_c2 = rbeta(10000, sqrt(c2), 20)
util = 0
for(theta in theta_draws){
util_c1 = util_c1 + 100 + 20*log(theta) - c
util_c2 = util_c2 + 100 + 20*log(theta) - c
}
return (listc(util_c1 = util_c1, util_c2 = util_c2))
}
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c))
utility_c2 =  append(utility, utility_function(c))
}
utility_function = function(c){
theta_draws_c1 = rbeta(10000, sqrt(c1), 20)
theta_draws_c2 = rbeta(10000, sqrt(c2), 20)
utility_c1 = 0
utility_c2 = 0
for(theta in theta_draws){
util_c1 = util_c1 + 100 + 20*log(theta) - c
util_c2 = util_c2 + 100 + 20*log(theta) - c
}
return (listc(util_c1 = util_c1, util_c2 = util_c2))
}
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c))
utility_c2 =  append(utility, utility_function(c))
}
utility_function = function(c){
theta_draws_c1 = rbeta(10000, sqrt(c1), 20)
theta_draws_c2 = rbeta(10000, sqrt(c2), 20)
util_c1 = 0
util_c2 = 0
for(theta in theta_draws){
util_c1 = util_c1 + 100 + 20*log(theta) - c
util_c2 = util_c2 + 100 + 20*log(theta) - c
}
return (listc(util_c1 = util_c1, util_c2 = util_c2))
}
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c))
utility_c2 =  append(utility, utility_function(c))
}
utility_function = function(c){
theta_draws_c1 = rbeta(10000, sqrt(c1), 20)
theta_draws_c2 = rbeta(10000, sqrt(c2), 20)
util_c1 = 0
util_c2 = 0
for(theta in theta_draws){
util_c1 = util_c1 + 100 + 20*log(theta) - c
util_c2 = util_c2 + 100 + 20*log(theta) - c
}
return (list(util_c1 = util_c1, util_c2 = util_c2))
}
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c))
utility_c2 =  append(utility, utility_function(c))
}
utility_c1
utility_c1$util_c1
utility_function = function(c){
util = 0
for(theta in theta_draws){
util = util + 100 + 20*log(theta) - c
}
return (util)
}
utility_function = function(c, theta_draws){
util = 0
for(theta in theta_draws){
util = util + 100 + 20*log(theta) - c
}
return (util)
}
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
theta_draws_c1 = rbeta(10000, sqrt(c1), 20)
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
theta_draws_c1 = rbeta(10000, sqrt(c1), 20)
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c, theta_draws_c1))
}
plot(cGrid, utility_c1, type = 'l')
theta_draws_c1 = rbeta(10000, sqrt(c1), 20)
theta_draws_c1
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
theta_draws_c1 = rbeta(10000, sqrt(c1), 20)
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c, theta_draws_c1))
}
utility_c1
length(utility_c1)
cGrid = seq(4,20,0.5)
utility_function = function(c, theta_draws){
util = 0
for(theta in theta_draws){
util = util + 100 + 20*log(theta) - c
}
return (util)
}
utility_c1 = c()
utility_c2 = c()
par(mfrow = c(1,1))
theta_draws_c1 = rbeta(10000, sqrt(c1), 20)
for(c in cGrid){
utility_c1 =  append(utility, utility_function(c, theta_draws_c1))
}
plot(cGrid, utility_c1, type = 'l')
utility_c1
